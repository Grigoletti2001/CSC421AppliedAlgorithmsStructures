Week 7 homework : 

Viewings and Readings
[Links to the slides, recordings, and quiz are on the course web site.]
Review the week 7 lecture slides.
View the week 7 lecture recordings and the discussion session recording.
Complete the week 7 quiz.
Read sections 4.3-5 of the textbook.
Problems
Please write precise and concise answers. Except where explicitly indicated, 
your algorithm descriptions should use either clear, concise, and precise plain English or clear,
 concise, and precise pseudo-code that uses a style similar to the pseudo-code in your textbook. 
 Submit your solutions to problems 1-3(b) via D2L as a Word or PDF file or as scans/photos of legible 
 handwritten notes. Submit your solution to problem 3(a) via Kattis.

----------------------------------------------------------------------------------------------------------------------------------------

1.    Problem 12 page 130 parts (a) and (b) only. You may assume that you, not Elmo, is making the first move. 
For part (a), you need to give an example. In part (b) you need to develop a dynamic programming 
algorithm using the usual approach (1(a), 1(b), 2(a), ...).






12.  You and your eight-year-old nephew Elmo decide to play a simple card
 game. At the beginning of the game, the cards are dealt face up in a long
 row. Each card is worth a diÔ¨Äerent number of points. After all the cards are
 dealt, 
 you and Elmo take turns removing either the leftmost or rightmost
 card from the row, until all the cards are gone. 
 
 At each turn, you can decide
 which of the two cards to take. 
 
 The winner of the game is the player that
 has collected the most points when the game ends.
 Having never taken an algorithms class, **Elmo follows the obvious greedy
 strategy‚Äîwhen it‚Äôs his turn, Elmo always takes the card with the higher
 point value.** Your task is to Ô¨Ånd a strategy that will beat Elmo whenever
 possible. (It might seem mean to beat up on a little kid like this, but Elmo
 absolutely hates it when grown-ups let him win.)





 (a) Prove that you should not also use the greedy strategy. That is, show
 that there is a game that you can win, but only if you do not follow the
 same greedy strategy as Elmo.

The game will be a fair game in which both players will try to win, however Elmo will always choose the 
card with the higher value. We (us), will always get the card with the lowest value. 
This means our drawing of the card will be recursive.

card1 + min(F(i+2,j), F(i+1, j-1));

F = max value we can collect. 


(b) Describe and analyze an algorithm to determine, given the initial se-
 quence of cards, the maximum number of points that you can collect
 playing against Elmo.

We will choose the rightmost card (i) with a value of (j).
Elmo chooses i  or j after grownup after grownup goes. Thus Best 
strategy is for us to go first. Becuase elmo is using a greedy algorithm
approach, we will always get a lower or equal value to Elmo (except for first round).
F(i,j) represents the max value we can collect from i to j 
as grownup wants to maximize points to beat elmo. 

Sumarize: go first pick highest card value, then tie it point value as much as possible. 
we will use recursion to give us the best chance to win. 


function strategy (int array, int n) {

    int matrix[n][n];
    //creating the matrix 
    for (int g = 0; g<n; g++) {
        for (int i=0, j =g; j<n; ,j++) {
            int x = ((i + 2) <= j) ? matrix[i + 2][j] : 0;
int y = ((i + 1) <= (j - 1)) ? matrix[i + 1][j - 1] : 0;
int z = (i <= (j - 2)) ? matrix[i][j - 2] : 0;
    matrix[i][j] = max( arr[i] + min(x, y), arr[j] + min(y, z));


        }

    }
return matrix[0][n-1];

}

----------------------------------------------------------------------------------------------------------------------------------------

2.    Problem 3 page 178. Note that the interval that we hit first, 
when moving from left to right, must be in the cover. How do you then
 choose the next interval to add to the optimal cover? Find a greedy 
 approach that works and describe the algorithm. ***Prove that your algorithm
  is correct by proving the greedy choice and optimal substructure properties.***


Let X be a set of n intervals on the real line. We say that a subset of intervals
 Y ‚äÜ X covers X if the union of all intervals in Y is equal to the union of all
 intervals in X. The size of a cover is just the number of intervals.
 Describe and analyze an eÔ¨Écient algorithm to compute the smallest
 cover of X. Assume that your input consists of two arrays L[1.. n] and
 R[1.. n], representing the left and right enmatrixoints of the intervals in X. If
 you use a greedy algorithm, you must prove that it is correct.

 XXXXXXXXXX 		XXXXXXXXXX. xxxxxxxxxx.       xxxx

Xxxxxxx.               XXXXXXXXXXX.                 XXXXXX


    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.     XXXXXXXX      XXXXXXXXXXXXXX 


XXXXXXXXXXXXXXX    xxxxx.      	XXXXXXXXXXXXXXXXXXX	
(A ROUGH PICTURE OF THE CHART IN THE DIAGRAM.  SHADDED BOXES ARE CAPITALIZED). 



A.  Sort the interval by ascending order of right endpoint.  
B. Select the interval with the lowest finishing time (interval i)
C. with interval i selected, add interval j to the solution with the highest value which is to the right and overlaps with i. 
D. Remove all intervals from the set which overlaps with j selected in the solution since they are already covered by j. 
E. Repeat steps B-D for the rest of the intervals. 

O (n log n) because of sorting and wer are iteraing over each interval 1x. 


because i (max right) must be covered by i, & our algo 
selects that i having max right end cover... thus if all i overlapped with 
first chosen are only considered, then the algo returns the solution though not optimized. but is part of a optimized solution. 

with remaining i options we can handle them in an O(n) fashion for simplicity sake because the first unit was optimized.
 



----------------------------------------------------------------------------------------------------------------------------------------

3.    Week 7 problem woodcutting on Kattis.

Yraglac recently decided to get into the wood cutting business, 
and now has ùëÅ customers who would like to have their wood cut. 
A piece of wood of size ùë† takes ùë† time units to cut, and Yraglac 
can only cut a single piece of wood at a time. To maximize customer happiness, 
Yraglac would like to minimize the average total time a customer has to wait 
to have all of their wood pieces cut. Can you help him?

Input
The first line contains a single integer ùëá‚â§10 giving the number of test cases. 
Each test case begins with an integer ùëÅ (1‚â§ùëÅ‚â§105), the number of customers.
 ùëÅ lines follow, where the ùëñth line begins with an integer ùëäùëñ (1‚â§ùëäùëñ‚â§105), 
 the number of wood pieces that customer ùëñ would like to have cut, followed b
 y ùëäùëñ integers, the sizes of the wood pieces of the customer. Each wood piece
  has a size between 1 and 1000 inclusive. The total number of wood pieces will not
   exceed 105.

Output
For each test case, output a single line containing the minimum average
 total time a customer will wait to have all of their wood pieces cut. 
 Your answer will be considered correct if its absolute or relative error 
 doesn‚Äôt exceed 10‚àí6.

    (a)  Implement a greedy algorithm using your preferred 
    language and submit your implementation via Kattis.







    (b)  Prove that your algorithm is correct by proving the 
    greedy choice and optimal substructure properties.