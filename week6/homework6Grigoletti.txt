Joseph Grigoletti Homework 




Viewings and Readings
[Links to the slides, recordings, and quiz are on the course web site.]
Review the week 6 lecture slides.
View the week 6 lecture recordings and the discussion session recording.
Complete the week 6 quiz.
Read sections 3.7-9 and 4.1-2 of the textbook. (Section 3.10 is optional.)







Problems
Please write precise and concise answers. Except where explicitly indicated, your algorithm descriptions should use either clear, concise, and precise plain English or clear, concise, and precise pseudo-code that uses a style similar to the pseudo-code in your textbook. Submit your solutions to problems 1-4(a) via D2L as a Word or PDF file or as scans/photos of legible handwritten notes. Submit your solutions to problems 4(b) and 5 via Kattis.


1.    Problem 5(b) page 125.


This exercise asks you to develop eÔ¨Écient algorithms to Ô¨Ånd optimal subse-
 quences of various kinds. A *subsequence* is anything obtained from a sequence
 by extracting a subset of elements, but keeping them in the same order; the
 elements of the subsequence need not be contiguous in the original sequence.
 For example, the strings C, DAMN, YAIOAI, and DYNAMICPROGRAMMING are all
 subsequences of the string DYNAMICPROGRAMMING.
 [Hint: Exactly one of these problems can be solved in O(n) time using a
 greedy algorithm.]


 Let A[1.. m] and B[1.. n] be two arbitrary arrays. A common super-
 sequence of A and B is another sequence that contains both A and B as
 subsequences. Describe an eÔ¨Écient algorithm to compute the length of
 the **shortest common supersequence *** of A and B.

 steps : 
 1.1. Find Longest common subsequence (lcs) of 2 given strings. 
 1.2. Insert non-lcs chars (in original order in strings) to the lcs and return the result. 
 	1.2.1 example : 
 	string1: = [DAMN];
 	string2: - [DYNAMICPROGRAMMING]; 

 	Rough OOP code (not perfect)

class SCS {
	static int SCSfunction(string 1, string 2) {

	int a = 1.length(); 
	int b = 2.length(); 

	//find longest common sub.
	int large = lcs(1, 2, a, b); 

	return (a+b-1); 



	}
	static int lcscunction (string 1, string 2, int a, int b) {
		int [] [] L = new int [a +1] [b+1];
		int i, j; 


		for (i = 0; i <= m; i++) {
            for (j = 0; j <= n; j++) {
                if (i == 0 || j == 0)
                    L[i][j] = 0;

                    elif (1.char at (i-1) == Y.charArt (j-1))
                    	L[i] [j] = L [i-1][j -1] +1; 

                    	else 
                    		L[i][j] = math.max (L[i-1][j], 
                    				L[i][j-1]);


	}}
	return L[a, b]

}
public static void main(String args[])
    {



    String 1 = "DAMN"; 
    strig 2 = "DYNAMICPROGRAMMING"; 
    system.out.println ("length of the shortest " + "supersequence is " + shortestsupersequence(a, b));


    }}



2.    Problem 9(a) page 128.

A palindrome is any string that is exactly the same as its reversal, like I, or
 DEED, or RACECAR, or AMANAPLANACATACANALPANAMA.


 Describe and analyze an algorithm to Ô¨Ånd the length of the longest
 subsequence of a given string that is also a palindrome.
 For example, the longest palindrome subsequence of the string
 MAHDYNAMICPROGRAMZLETMESHOWYOUTHEM is MHYMRORMYHM; thus, given
 that string as input, your algorithm should return 11.


**Steps to solve :** 

1.  all single chars are the palindrome sequence of size 1


2.Lis(i,j)=1 for all indexes i in the string


3.If 1 and last character of string is not same then, (se[i] !=se[j]) Lis(i,j)=max{Lis(i+1,j), Lis(i,j-1)}


4.if there exist 2 chars and both of them are same then ,if j==i+1 ,so Lis(i,j)=2

5.if there exist more than 2 chars and first and last value is same then

6. Lis(i,j)=Lis(i+1,j-1)+2

7. a function is called (which stores the variables), and calculates the results. 

8.  the  length of the string is printed (11)


O(n^2) 





3.    Problem 1 page 176.

Caveat lector: Some of these exercises cannot be solved using greedy algorithms! Whenever you describe and analyze a greedy algorithm, you must also include a proof that your algorithm is correct; this proof will typically take the form of an exchange argument. These proofs are especially important in classes (like mine) that do not normally require proofs of correctness.


The GreedySchedule algorithm we described for the class scheduling
 problem is not the only greedy strategy we could have tried. For each of
 the following alternative greedy strategies, ***either prove that the resulting
 algorithm always constructs an optimal schedule, or describe a small input
****
 example for which the algorithm does not produce an optimal schedule. Assume that all algorithms break ties arbitrarily (that is, in a manner that is completely out of your control). [Hint: Three of these algorithms are actually correct.]

 C
 H 
 I 



(a) Choose the course x that ends last, discard classes that conÔ¨Çict with x,
 and recurse.
(b) Choose the course x that starts Ô¨Årst, discard all classes that conÔ¨Çict
 with x, and recurse.


(c) Choose the course x that starts last, discard all classes that conÔ¨Çict
 with x, and recurse.

We can prove this using induction & general greedy proof strategy as described in the book and several online sources

https://web.stanford.edu/class/archive/cs/cs161/cs161.1138/handouts/120%20Guide%20to%20Greedy%20Algorithms.pdf  




(d) Choose the course x with shortest duration, discard all classes that
 conÔ¨Çict with x, and recurse.
(e) Choose a course x that conÔ¨Çicts with the fewest other courses, discard all
 classes that conÔ¨Çict with x, and recurse.
(f) If no classes conÔ¨Çict, choose them all. Otherwise, discard the course
 with longest duration and recurse.
(g) If no classes conÔ¨Çict, choose them all. Otherwise, discard a course that
 conÔ¨Çicts with the most other courses and recurse.


(h) Let x be the class with the earliest start time, and let y be the class with
 the second earliest start time.
‚Ä¢ If x and y are disjoint, choose x and recurse on everything but x.
‚Ä¢ If x completely contains y, discard x and recurse.
‚Ä¢ Otherwise, discard y and recurse.

We can prove this using the principle of exclusion. 
If ùë• and ùë¶ are disjoint, then every optimal schedule contains ùë•.




(i) If any course x completely contains another course, discard x and
 recurse. Otherwise, choose the course y that ends last, discard all classes
 that conÔ¨Çict with y, and recurse.





4.    Week 6 problem walrusweights on Kattis.
    (a)  Develop a dynamic programming algorithm for the problem. Do this by going through the steps 1(a), 1(b), 2(a), ...  listed at the beginning of the lecture 6 slides. You should, in particular, describe the recursive solution/algorithm that is the result of 1(b).

var values-use an array.; 
var input(lines)... defines as int. ;

input = parsing the integers and reads the data; (a method)
	while loop  

var result = new array (); 

result[0] = boolean value; 



function : iterate (aka loop)  over current value  & previous value. 

call the method : iterate (); 


Results function (results): a basic for loop. 

	for  
		else if . 

		END 



    (b)  Implement your dynamic programming solution using your preferred language and submit your implementation via Kattis.






5. [Optional]     Week 6 problem spiderman on Kattis. Submit your solution via Kattis.


